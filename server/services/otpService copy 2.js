import OTP from "../models/otp.js";
import { Resend } from "resend";

const resend = new Resend(process.env.RESEND_API_KEY);

export const sendOTPService = async (email) => {
  try {
    const otpCode = Math.floor(100000 + Math.random() * 900000).toString();
    const expiresAt = new Date(Date.now() + 5 * 60 * 1000);

    // X√≥a OTP c≈© tr∆∞·ªõc khi t·∫°o m·ªõi
    await OTP.deleteMany({ email });

    // L∆∞u OTP v√†o database
    await OTP.create({
      email: email.trim().toLowerCase(),
      otp: otpCode,
      expiresAt,
    });

    // G·ª≠i email qua Resend
    const { data, error } = await resend.emails.send({
      from: "onboarding@resend.dev",
      to: email,
      subject: "M√£ OTP ƒëƒÉng k√Ω t√†i kho·∫£n",
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #2563eb;">X√°c th·ª±c t√†i kho·∫£n</h2>
          <p>M√£ OTP ƒë·ªÉ ƒëƒÉng k√Ω t√†i kho·∫£n c·ªßa b·∫°n l√†:</p>
          <div style="background: #f3f4f6; padding: 16px; text-align: center; font-size: 24px; font-weight: bold; letter-spacing: 4px; margin: 20px 0;">
            ${otpCode}
          </div>
          <p>M√£ c√≥ hi·ªáu l·ª±c trong <strong>5 ph√∫t</strong>.</p>
          <p style="color: #6b7280; font-size: 14px;">N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu m√£ n√†y, vui l√≤ng b·ªè qua email n√†y.</p>
        </div>
      `,
    });

    if (error) {
      console.error("‚ùå Resend error:", error);

      // üî• X√ìA OTP ƒê√É T·∫†O V√å G·ª¨I EMAIL TH·∫§T B·∫†I
      await OTP.deleteMany({ email: email.trim().toLowerCase() });

      return {
        success: false,
        message: "L·ªói g·ª≠i OTP. Vui l√≤ng th·ª≠ l·∫°i sau.",
      };
    }

    console.log("‚úÖ ƒê√£ g·ª≠i OTP qua Resend");
    return {
      success: true,
      message: "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n!",
    };
  } catch (error) {
    console.error("‚ùå L·ªói g·ª≠i OTP:", error);

    // üî• X√ìA OTP N·∫æU C√ì L·ªñI TRONG QU√Å TR√åNH
    try {
      await OTP.deleteMany({ email: email?.trim().toLowerCase() });
    } catch (deleteError) {
      console.error("‚ùå L·ªói khi x√≥a OTP:", deleteError);
    }

    return {
      success: false,
      message: "L·ªói h·ªá th·ªëng. Vui l√≤ng th·ª≠ l·∫°i sau.",
    };
  }
};

export const verifyOTPService = async (email, otp) => {
  try {
    if (!email || !otp) {
      console.log("‚ùå Thi·∫øu email ho·∫∑c OTP");
      return { success: false, message: "Email v√† OTP l√† b·∫Øt bu·ªôc." };
    }

    // Chu·∫©n h√≥a d·ªØ li·ªáu
    const cleanOTP = otp.toString().trim();
    const cleanEmail = email.trim().toLowerCase();

    // T√¨m OTP g·∫ßn nh·∫•t cho email
    const record = await OTP.findOne({ email: cleanEmail }).sort({
      createdAt: -1,
    });

    if (!record) {
      console.log("‚ùå Kh√¥ng t√¨m th·∫•y OTP record cho email:", cleanEmail);
      return { success: false, message: "OTP kh√¥ng h·ª£p l·ªá." };
    }

    // So s√°nh OTP
    if (record.otp !== cleanOTP) {
      console.log("‚ùå OTP kh√¥ng kh·ªõp");
      return { success: false, message: "OTP kh√¥ng h·ª£p l·ªá." };
    }

    // Ki·ªÉm tra h·∫øt h·∫°n
    if (record.expiresAt < new Date()) {
      console.log("‚ùå OTP ƒë√£ h·∫øt h·∫°n");
      return { success: false, message: "OTP ƒë√£ h·∫øt h·∫°n." };
    }

    // X√°c th·ª±c th√†nh c√¥ng, x√≥a OTP
    await OTP.deleteOne({ _id: record._id });
    console.log("‚úÖ OTP h·ª£p l·ªá, ƒë√£ x√≥a");

    return { success: true, message: "X√°c th·ª±c OTP th√†nh c√¥ng!" };
  } catch (error) {
    console.error("üí• L·ªói x√°c th·ª±c OTP:", error);
    return { success: false, message: "L·ªói server khi x√°c th·ª±c OTP" };
  }
};
