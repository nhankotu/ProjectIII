import OTP from "../models/otp.js";

export const sendOTPService = async (email) => {
  let otpCode = Math.floor(100000 + Math.random() * 900000).toString();

  try {
    const expiresAt = new Date(Date.now() + 5 * 60 * 1000);

    // L∆∞u OTP v√†o database
    await OTP.deleteMany({ email });
    await OTP.create({
      email: email.trim().toLowerCase(),
      otp: otpCode,
      expiresAt,
    });

    console.log("üìß Sending OTP via Web3Forms to:", email);

    // üî• S·ª¨A: D√πng FormData theo documentation
    const formData = new FormData();
    formData.append("access_key", process.env.WEB3FORMS_ACCESS_KEY);
    formData.append("subject", "M√£ OTP ƒëƒÉng k√Ω t√†i kho·∫£n");
    formData.append("from_name", "Your App");
    formData.append("email", email);
    formData.append(
      "message",
      `M√£ OTP c·ªßa b·∫°n l√†: ${otpCode}. M√£ c√≥ hi·ªáu l·ª±c trong 5 ph√∫t.`
    );

    const response = await fetch("https://api.web3forms.com/submit", {
      method: "POST",
      body: formData,
    });

    const result = await response.json();

    if (result.success) {
      console.log("‚úÖ OTP sent successfully via Web3Forms");
      return {
        success: true,
        message: "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n!",
      };
    } else {
      throw new Error(result.message || "Send failed");
    }
  } catch (error) {
    console.error("‚ùå Web3Forms failed:", error);

    return {
      success: true,
      message: `M√£ OTP c·ªßa b·∫°n: ${otpCode} (G·ª≠i email th·∫•t b·∫°i)`,
      otp: otpCode,
    };
  }
};

// verifyOTPService gi·ªØ nguy√™n
export const verifyOTPService = async (email, otp) => {
  try {
    if (!email || !otp) {
      return { success: false, message: "Email v√† OTP l√† b·∫Øt bu·ªôc." };
    }

    const cleanOTP = otp.toString().trim();
    const cleanEmail = email.trim().toLowerCase();

    // T√¨m OTP trong database
    const record = await OTP.findOne({ email: cleanEmail }).sort({
      createdAt: -1,
    });

    if (!record) {
      return { success: false, message: "OTP kh√¥ng h·ª£p l·ªá." };
    }

    if (record.otp !== cleanOTP) {
      return { success: false, message: "OTP kh√¥ng h·ª£p l·ªá." };
    }

    if (record.expiresAt < new Date()) {
      return { success: false, message: "OTP ƒë√£ h·∫øt h·∫°n." };
    }

    // X√°c th·ª±c th√†nh c√¥ng, x√≥a OTP
    await OTP.deleteOne({ _id: record._id });
    console.log("‚úÖ OTP h·ª£p l·ªá, ƒë√£ x√≥a");

    return { success: true, message: "X√°c th·ª±c OTP th√†nh c√¥ng!" };
  } catch (error) {
    console.error("üí• L·ªói x√°c th·ª±c OTP:", error);
    return { success: false, message: "L·ªói server khi x√°c th·ª±c OTP" };
  }
};
