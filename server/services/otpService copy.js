import OTP from "../models/otp.js";
import { transporter } from "../config/email.js";

export const sendOTPService = async (email) => {
  try {
    const otpCode = Math.floor(100000 + Math.random() * 900000).toString();
    const expiresAt = new Date(Date.now() + 5 * 60 * 1000);

    // X√≥a OTP c≈© tr∆∞·ªõc khi t·∫°o m·ªõi
    await OTP.deleteMany({ email });

    const otpRecord = await OTP.create({
      email: email.trim().toLowerCase(),
      otp: otpCode,
      expiresAt,
    });

    // G·ª≠i email
    await transporter.sendMail({
      from: process.env.EMAIL_USER,
      to: email,
      subject: "M√£ OTP ƒëƒÉng k√Ω",
      text: `M√£ OTP c·ªßa b·∫°n l√†: ${otpCode}. H·∫øt h·∫°n trong 5 ph√∫t.`,
    });

    console.log("‚úÖ ƒê√£ g·ª≠i OTP qua email");
    return { success: true, message: "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email!" };
  } catch (error) {
    console.error("‚ùå L·ªói g·ª≠i OTP:", error);
    return { success: false, message: "L·ªói server khi g·ª≠i OTP" };
  }
};

export const verifyOTPService = async (email, otp) => {
  try {
    if (!email || !otp) {
      console.log("‚ùå Thi·∫øu email ho·∫∑c OTP");
      return { success: false, message: "Email v√† OTP l√† b·∫Øt bu·ªôc." };
    }

    // Chu·∫©n h√≥a d·ªØ li·ªáu
    const cleanOTP = otp.toString().trim();
    const cleanEmail = email.trim().toLowerCase();

    // T√¨m OTP g·∫ßn nh·∫•t cho email
    const record = await OTP.findOne({ email: cleanEmail }).sort({
      createdAt: -1,
    });

    if (!record) {
      console.log("‚ùå Kh√¥ng t√¨m th·∫•y OTP record cho email:", cleanEmail);

      // Ki·ªÉm tra xem c√≥ OTP n√†o trong database kh√¥ng
      const allOtps = await OTP.find({});
      console.log("üìã T·∫•t c·∫£ OTP trong database:", allOtps);

      return { success: false, message: "OTP kh√¥ng h·ª£p l·ªá." };
    }

    // So s√°nh OTP
    if (record.otp !== cleanOTP) {
      console.log("‚ùå OTP kh√¥ng kh·ªõp");
      return { success: false, message: "OTP kh√¥ng h·ª£p l·ªá." };
    }

    // Ki·ªÉm tra h·∫øt h·∫°n
    if (record.expiresAt < new Date()) {
      console.log("‚ùå OTP ƒë√£ h·∫øt h·∫°n");
      return { success: false, message: "OTP ƒë√£ h·∫øt h·∫°n." };
    }

    // X√°c th·ª±c th√†nh c√¥ng, x√≥a OTP
    await OTP.deleteOne({ _id: record._id });
    console.log("‚úÖ OTP h·ª£p l·ªá, ƒë√£ x√≥a");

    return { success: true, message: "X√°c th·ª±c OTP th√†nh c√¥ng!" };
  } catch (error) {
    console.error("üí• L·ªói x√°c th·ª±c OTP:", error);
    return { success: false, message: "L·ªói server khi x√°c th·ª±c OTP" };
  }
};
