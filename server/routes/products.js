import express from "express";
import Product from "../models/product.js";
import multer from "multer";
import { CloudinaryStorage } from "multer-storage-cloudinary";
import cloudinary from "../config/cloudinary.js";

const router = express.Router();

// C·∫•u h√¨nh Cloudinary Storage
const storage = new CloudinaryStorage({
  cloudinary,
  params: {
    folder: "products",
    allowed_formats: ["jpg", "png", "jpeg", "mp4", "mov"],
    resource_type: "auto",
  },
});

const upload = multer({ storage });

// [GET] /api/products ‚Üí l·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m
router.get("/", async (req, res) => {
  try {
    const products = await Product.find().sort({ createdAt: -1 });
    res.json(products);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "L·ªói server khi l·∫•y s·∫£n ph·∫©m" });
  }
});

// [POST] /api/products ‚Üí th√™m s·∫£n ph·∫©m m·ªõi v·ªõi ·∫£nh
router.post(
  "/",
  upload.fields([
    { name: "images", maxCount: 10 },
    { name: "videos", maxCount: 5 },
  ]),
  async (req, res) => {
    try {
      console.log("üì¶ Files received:", req.files);
      console.log("üìù Body data:", req.body);

      const { name, description, price, category, stock, status } = req.body;

      // Ki·ªÉm tra d·ªØ li·ªáu b·∫Øt bu·ªôc
      if (!name || !price) {
        return res.status(400).json({
          message: "T√™n v√† gi√° s·∫£n ph·∫©m l√† b·∫Øt bu·ªôc",
        });
      }

      // X·ª≠ l√Ω ·∫£nh t·ª´ Cloudinary
      const images = req.files?.images
        ? req.files.images.map((file) => ({
            url: file.path,
            public_id: file.filename,
            secure_url: file.path,
          }))
        : [];

      // X·ª≠ l√Ω video t·ª´ Cloudinary
      const videos = req.files?.videos
        ? req.files.videos.map((file) => ({
            url: file.path,
            public_id: file.filename,
            secure_url: file.path,
          }))
        : [];

      console.log("üñºÔ∏è Processed images:", images);
      console.log("üé• Processed videos:", videos);

      // T·∫°o s·∫£n ph·∫©m m·ªõi v·ªõi status h·ª£p l·ªá
      const newProduct = new Product({
        name,
        description: description || "",
        price: Number(price),
        category: category || "Uncategorized",
        stock: stock ? Number(stock) : 0,
        status: status || "pending", // S·ª≠ d·ª•ng "pending" thay v√¨ "active"
        images,
        videos,
      });

      const savedProduct = await newProduct.save();

      console.log("‚úÖ Product saved successfully:", savedProduct);

      res.status(201).json({
        message: "‚úÖ Th√™m s·∫£n ph·∫©m th√†nh c√¥ng",
        product: savedProduct,
      });
    } catch (error) {
      console.error("‚ùå Error creating product:", error);
      res.status(500).json({
        message: "L·ªói server khi th√™m s·∫£n ph·∫©m",
        error: error.message,
      });
    }
  }
);
// [DELETE] /api/products/:id ‚Üí x√≥a s·∫£n ph·∫©m
router.delete("/:id", async (req, res) => {
  try {
    const productId = req.params.id;

    // T√¨m s·∫£n ph·∫©m tr∆∞·ªõc khi x√≥a ƒë·ªÉ l·∫•y th√¥ng tin ·∫£nh/video
    const product = await Product.findById(productId);

    if (!product) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m" });
    }

    // X√≥a ·∫£nh v√† video t·ª´ Cloudinary (n·∫øu c√≥)
    try {
      // X√≥a ·∫£nh
      if (product.images && product.images.length > 0) {
        for (const image of product.images) {
          if (image.public_id) {
            await cloudinary.uploader.destroy(image.public_id);
          }
        }
      }

      // X√≥a video
      if (product.videos && product.videos.length > 0) {
        for (const video of product.videos) {
          if (video.public_id) {
            await cloudinary.uploader.destroy(video.public_id, {
              resource_type: "video",
            });
          }
        }
      }
    } catch (cloudinaryError) {
      console.error("L·ªói khi x√≥a file t·ª´ Cloudinary:", cloudinaryError);
      // V·∫´n ti·∫øp t·ª•c x√≥a s·∫£n ph·∫©m d√π c√≥ l·ªói Cloudinary
    }

    // X√≥a s·∫£n ph·∫©m t·ª´ database
    await Product.findByIdAndDelete(productId);

    res.json({
      message: "‚úÖ X√≥a s·∫£n ph·∫©m th√†nh c√¥ng",
      deletedProduct: product,
    });
  } catch (error) {
    console.error("‚ùå Error deleting product:", error);
    res.status(500).json({
      message: "L·ªói server khi x√≥a s·∫£n ph·∫©m",
      error: error.message,
    });
  }
});

export default router;
