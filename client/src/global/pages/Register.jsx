import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
const API_BASE = import.meta.env.VITE_API_URL;

function Register() {
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    username: "",
    email: "",
    password: "",
    confirmPassword: "",
    role: "customer",
    otp: "",
  });

  const [showOTPModal, setShowOTPModal] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  // G·ª≠i th√¥ng tin ƒëƒÉng k√Ω (c√≥ ho·∫∑c kh√¥ng c√≥ OTP)
  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);

    // Validation
    if (!formData.username || !formData.email || !formData.password) {
      alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin.");
      setIsLoading(false);
      return;
    }
    if (formData.password !== formData.confirmPassword) {
      alert("M·∫≠t kh·∫©u nh·∫≠p l·∫°i kh√¥ng kh·ªõp!");
      setIsLoading(false);
      return;
    }

    try {
      // Chu·∫©n b·ªã data ƒë·ªÉ g·ª≠i
      const requestData = {
        username: formData.username,
        email: formData.email,
        password: formData.password,
        role: formData.role,
      };

      // Ch·ªâ th√™m OTP n·∫øu ng∆∞·ªùi d√πng ƒë√£ nh·∫≠p
      if (formData.otp && formData.otp.trim() !== "") {
        requestData.otp = formData.otp;
      }

      console.log("üîÑ G·ª≠i request:", requestData);

      const res = await fetch(`${API_BASE}/api/users/register`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(requestData),
      });

      const data = await res.json();
      console.log("üì® Response t·ª´ server:", data);

      if (res.ok) {
        if (data.requiresOTP || !formData.otp) {
          // B∆∞·ªõc 1: OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i
          alert(
            data.message ||
              "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email! Vui l√≤ng ki·ªÉm tra v√† nh·∫≠p OTP."
          );
          setShowOTPModal(true);
        } else {
          // B∆∞·ªõc 2: ƒêƒÉng k√Ω th√†nh c√¥ng
          alert("ƒêƒÉng k√Ω th√†nh c√¥ng!");
          navigate("/login");
        }
      } else {
        alert(data.message || "C√≥ l·ªói x·∫£y ra!");

        // N·∫øu l·ªói do OTP, v·∫´n hi·ªÉn th·ªã modal ƒë·ªÉ nh·∫≠p l·∫°i
        if (data.message?.includes("OTP")) {
          setShowOTPModal(true);
        }
      }
    } catch (error) {
      console.error("L·ªói k·∫øt n·ªëi:", error);
      alert("Kh√¥ng th·ªÉ k·∫øt n·ªëi server.");
    } finally {
      setIsLoading(false);
    }
  };

  // X·ª≠ l√Ω x√°c nh·∫≠n OTP
  const handleVerifyOTP = async () => {
    if (!formData.otp) {
      alert("Vui l√≤ng nh·∫≠p OTP.");
      return;
    }
    await handleSubmit(new Event("submit")); // G·ª≠i l·∫°i form v·ªõi OTP
  };

  // G·ª≠i l·∫°i OTP
  const handleResendOTP = async () => {
    try {
      const res = await fetch("http://localhost:5000/api/users/register", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          username: formData.username,
          email: formData.email,
          password: formData.password,
          role: formData.role,
          // KH√îNG g·ª≠i OTP ƒë·ªÉ trigger g·ª≠i OTP m·ªõi
        }),
      });

      const data = await res.json();
      if (res.ok) {
        alert("OTP m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email!");
      } else {
        alert(data.message || "G·ª≠i l·∫°i OTP th·∫•t b·∫°i!");
      }
    } catch (error) {
      console.error(error);
      alert("Kh√¥ng th·ªÉ k·∫øt n·ªëi server.");
    }
  };

  return (
    <div className="flex justify-center items-center min-h-screen bg-gray-100">
      <div className="bg-white p-8 rounded-2xl shadow-md w-full max-w-md">
        <h2 className="text-2xl font-bold mb-6 text-center">
          ƒêƒÉng k√Ω t√†i kho·∫£n
        </h2>
        <form className="space-y-4" onSubmit={handleSubmit}>
          <input
            type="text"
            name="username"
            placeholder="T√™n ƒëƒÉng nh·∫≠p"
            value={formData.username}
            onChange={handleChange}
            className="w-full p-3 border rounded-lg"
            required
            disabled={showOTPModal} // Kh√≥a form khi ƒëang nh·∫≠p OTP
          />
          <input
            type="email"
            name="email"
            placeholder="Email"
            value={formData.email}
            onChange={handleChange}
            className="w-full p-3 border rounded-lg"
            required
            disabled={showOTPModal}
          />
          <input
            type="password"
            name="password"
            placeholder="M·∫≠t kh·∫©u"
            value={formData.password}
            onChange={handleChange}
            className="w-full p-3 border rounded-lg"
            required
            disabled={showOTPModal}
          />
          <input
            type="password"
            name="confirmPassword"
            placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u"
            value={formData.confirmPassword}
            onChange={handleChange}
            className="w-full p-3 border rounded-lg"
            required
            disabled={showOTPModal}
          />
          <select
            name="role"
            value={formData.role}
            onChange={handleChange}
            className="w-full p-3 border rounded-lg"
            disabled={showOTPModal}
          >
            <option value="customer">Ng∆∞·ªùi mua</option>
            <option value="seller">Ng∆∞·ªùi b√°n</option>
          </select>

          <button
            type="submit"
            disabled={isLoading}
            className="w-full bg-blue-600 text-white p-3 rounded-lg hover:bg-blue-700 disabled:bg-blue-300 transition"
          >
            {isLoading ? "ƒêang x·ª≠ l√Ω..." : "ƒêƒÉng k√Ω"}
          </button>
        </form>

        {/* OTP Modal */}
        {showOTPModal && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50">
            <div className="bg-white p-6 rounded-lg shadow-lg w-80">
              <h3 className="text-xl font-semibold mb-4 text-center">
                Nh·∫≠p OTP
              </h3>
              <p className="text-sm text-gray-600 mb-4 text-center">
                M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn: {formData.email}
              </p>
              <input
                type="text"
                placeholder="Nh·∫≠p m√£ OTP 6 s·ªë"
                value={formData.otp}
                onChange={(e) =>
                  setFormData({ ...formData, otp: e.target.value })
                }
                className="w-full p-3 border rounded-lg mb-4 text-center text-lg"
                maxLength={6}
              />
              <div className="flex space-x-2">
                <button
                  onClick={handleVerifyOTP}
                  disabled={isLoading}
                  className="flex-1 bg-green-600 text-white p-3 rounded-lg hover:bg-green-700 disabled:bg-green-300 transition"
                >
                  {isLoading ? "ƒêang x√°c th·ª±c..." : "X√°c nh·∫≠n"}
                </button>
                <button
                  onClick={handleResendOTP}
                  className="flex-1 bg-blue-600 text-white p-3 rounded-lg hover:bg-blue-700 transition"
                >
                  G·ª≠i l·∫°i OTP
                </button>
              </div>
              <button
                onClick={() => {
                  setShowOTPModal(false);
                  setFormData({ ...formData, otp: "" });
                }}
                className="w-full mt-2 bg-gray-300 text-black p-3 rounded-lg hover:bg-gray-400 transition"
              >
                H·ªßy
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

export default Register;
